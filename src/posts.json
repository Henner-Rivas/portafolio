[{"id":3,"title":"Entiende el  local Storage y sessión storage\r","category":"Desarrollo frontend\r","date":"april 11, 2022\r","content":"\r\n## ¿Que es y Como funciona local Storage y sessión storage?\r\n\r\n <br>\r\n\r\nInicialmente, los navegadores web solo mostraban la información proporcionada por el servidor y en realidad no hacían mucho más que representar la página.La web ha evolucionado mucho a lo largo de los años y ha dado paso al navegador que conocemos hoy.\r\n\r\n <br>\r\n\r\nLos navegadores actuales están en un punto, en el cual se pueden tener aplicaciones completamente independientes sin necesidad de una API, solo con cargar nuestro frontend y tener todos los datos de manera estática. Incluso podemos tener sitios web que sin estar conectados a internet funcionen,y los encargados de manerar esa información son el LocalStorage y SessionStorage.\r\n\r\n<br>\r\n\r\nA lo largo del artículo iremos viendo estos dos metodos de almacenar información en una aplicación web y por qué, utilizar en cada momento.\r\n<br>\r\n\r\n<br>\r\n\r\n## ¿Que es el SessionStorage?\r\n\r\n<br>\r\n\r\nSessionStorage es probablemente (según mi experiencia) el método menos utilizado para almacenar información en una aplicación web. Básicamente, este enfoque le permite almacenar información clave-valor de forma dinámica, pero solo en la pestaña en la que se encuentra el usuario, lo que significa que si cierra esta pestaña, los datos se perderán.\r\n<br>\r\n<br>\r\n\r\n### Guardar y obtener datos en sessionStorage\r\n\r\n <br>\r\n\r\n <Code language=\"javascript\">\r\n\r\n//Guardando valor en sessionStorage\r\nsessionStorage.setItem(\"nombre\", \"Henner Rivas Berrio\");\r\n\r\n//Obteniendo datos de sessionStorage\r\n\r\nlet nombreCompleto = window.sessionStorage.getItem(\"nombre\");\r\n\r\nconsole.log(`Hola, mi nombre es ${nombreCompleto}`);\r\n//Imprime: Hola, mi nombre es Henner Rivas Berrio\r\n\r\n</Code>\r\n <br>\r\n <br>\r\n\r\n## ¿Que es el localStorage?\r\n\r\n <br>\r\n\r\nEl localStorage es muy similar al sessionStorage, con la única diferencia que este puede ser compartido entre varias ventanas del navegador y perdura en el tiempo.\r\n<br>\r\n<br>\r\n\r\n### Guardar y obtener datos en localStorage\r\n\r\n <br>\r\n\r\n<Code language=\"javascript\">\r\n\r\n//Guardando valor en localStorage\r\nlocalStorage.setItem(\"nombre\", \"Henner Rivas Berrio\");\r\n\r\n//Obteniendo datos de localStorage\r\n\r\nlet nombreCompleto = window.localStorage.getItem(\"nombre\");\r\n\r\nconsole.log(`Hola, mi nombre es ${nombreCompleto}`);\r\n//Imprime: Hola, mi nombre es Henner Rivas Berrio\r\n\r\n</Code> \r\n <br>\r\n\r\n## Eliminnar un datos del Storage\r\n\r\n---\r\n\r\n<br>\r\n\r\n### localStorage\r\n\r\n <br>\r\n\r\n<Code language=\"javascript\">\r\nlocalStorage.removeItem(\"nombre\");\r\n</Code>\r\n\r\n <br>\r\n\r\n### SessionStorage\r\n\r\n <br>\r\n\r\n<Code language=\"javascript\">\r\nsessionStorage.removeItem(\"nombre\");\r\n</Code>\r\n\r\n<br>\r\n\r\n## Limpiar todo el storage\r\n\r\n---\r\n\r\n<br>\r\n\r\n### localStorage\r\n\r\n<br>\r\n\r\n<Code language=\"javascript\">\r\nlocalStorage.clear();\r\n</Code>\r\n\r\n<br>\r\n\r\n### SessionStorage\r\n\r\n <br>\r\n\r\n<Code language=\"javascript\">\r\nsessionStorage.clear();\r\n</Code>\r\n<br>\r\n<br>\r\n<br>\r\n"},{"id":2,"title":"¿Quieres aprender POO en javaScript?\r","category":"Desarrollo backend\r","date":"octubre 11, 2022\r","content":"\r\n## ¿Qué es la Programación Orientada a Objetos en JS?\r\n\r\n<br>\r\n\r\nLa Programación Orientada a Objetos (POO) no es mas que un modelo o un estilo de programación que nos da unas guías sobre cómo trabajar con él. Se basa en el concepto de clases y objetos. Este tipo de programación se utiliza para estructurar un programa de software en piezas simples y reutilizables de planos de código (clases) para crear instancias individuales de objetos.\r\n\r\n<br>\r\n\r\n### Como funciona la POO en javaScript\r\n\r\n<br>\r\n\r\nPrimero recordemos que en javaScript casi todo son objetos, normalmente en todos los lenguajes de programación que aplica POO son basado en clases, pero javaScript es orientado a objecto pero basado en prototipos (un prototipo es una estructura de código a partir de la cual se crean objetos,podemos pensarlo como un “molde” de objetos.) es un un poco raro pero, no nos preocupemos porque ya crearon en ECMAScript 2015 la sintaxis con class que funciona casi igual que en los otros lenguajes.\r\n\r\n<br>\r\n\r\n<!-- #### Sintaxis de class\r\n -->\r\n\r\n### Ventajas\r\n\r\n<br>\r\n\r\n- Reusabilidad. Cuando hemos diseñado adecuadamente las clases, se pueden usar en distintas partes del programa y en numerosos proyectos.\r\n\r\n* Mantenibilidad. Debido a la sencillez para abstraer el problema, los programas orientados a objetos son más sencillos de leer y comprender, pues nos permiten ocultar detalles de implementación dejando visibles sólo aquellos detalles más relevantes.\r\n\r\n* Modificabilidad. La facilidad de añadir, suprimir o modificar nuevos objetos nos permite hacer modificaciones de una forma muy sencilla.\r\n\r\n<br>\r\n\r\n<br>\r\n\r\n### Desventaja\r\n\r\nEl cambio en la forma de pensar de la programación tradicional a la orientada a objetos al principio en poco confuso.\r\n\r\n<br>\r\n\r\n## Pilares de la POO\r\n\r\n<br>\r\n\r\n### La abstracción\r\n\r\n<br>\r\n  Las abstracciones son un proceso u operación mental que tiene como objetivo aislar las propiedades y funciones esenciales en una clase que sirve de molde para crear otros objetos(instancias) que comparten las mismas propiedades y funciones y se pueden personalizar.\r\n<br>\r\n\r\n<br>\r\n\r\n### Encapsulamiento\r\n\r\n<br>\r\n\r\n_¿Qué es encapsulamiento?_ <br>\r\n\r\n<br>\r\n\r\n- Es guardar, proteger, guardar o limitar el acceso de cierto atributos y/o propiedades en nuestros prototipos y objetos.\r\n\r\n  <br>\r\n\r\n- Cuando hablamos de encapsulamiento nos referimos de no permitir la alteración de métodos y atributos.\r\n\r\n<br>\r\n\r\n**Formas de aplicar encapsulamiento en JavaScript**\r\n\r\n_Getters y setters_\r\n\r\n_Namespaces_\r\n\r\n_Object.defineProperties_\r\n\r\n_Módulo de ES6_\r\n\r\n<br>\r\n\r\n### La herencia\r\n\r\n<br>\r\n\r\nEs un mecanismo que permite derivar una clase a otra clase. <br>\r\nEn otras palabras, tendremos unas clases que serán hijos, y otras clases que serán padres. Las clases hijas pueden utilizar tanto sus métodos y propiedades como de la clase padre, siempre que su modificador de acceso lo permita (mas delante hablaremos de esto).\r\n\r\n<br>\r\n\r\n### El polimorfismo\r\n\r\n <br>\r\n \r\nEs como ‘La Herencia 2.0’. Es un pilar de la POO. Lo que es importante es lo que se puede hacer con este: Permite a nuestras subclases cambiar o anular los comportamientos de los métodos y atributos del prototipo madre, de la clase madre. Aunque herede las propiedades, el polimorfismo permite cambiar su comportamiento.\r\n\r\n<br>\r\n\r\n**Por ejemplo**\r\n\r\n<br>\r\n\r\nPodemos crear dos clases distintas: Gato y Perro, que heredan de la superclase Animal. La clase Animal tiene el método abstracto hacerSonido() que se implementa de forma distinta en cada una de las subclases (ya que los gatos y perros suenan de forma distinta)\r\n\r\n<br>\r\n\r\n## Ahora creemos una de una calculadora usando POO\r\n\r\n<br>\r\n\r\n<Code language=\"javascript\">\r\n// creamos la clase con class\r\nclass Calculadora {\r\n  // definimos un constructor para recibir parámetros\r\n  constructor(numero1, numero2) {\r\n    this.set_numero1(numero1);\r\n    this.set_numero2(numero2);\r\n  }\r\n  // creamos métodos de sumar\r\n  sumar() {\r\n  return this.numero2 + this.numero1;\r\n  }\r\n\r\n// creamos métodos de multiplicar\r\nmultiplicar() {\r\nreturn this.numero2 \\* this.numero1;\r\n}\r\n// creamos métodos de restar\r\n\r\nrestar() {\r\nreturn this.numero2 - this.numero1;\r\n}\r\n\r\n}\r\n\r\nconst calculadora = new Calculadora(4, 6);\r\n\r\nconsole.log(calculadora.sumar()); // 10\r\n\r\nconst calculadora2 = new Calculadora(4, 6);\r\n\r\nconsole.log(calculadora.multiplicar()); // 24\r\n\r\n</Code>\r\n\r\n<br>\r\n\r\n## Ahora un ejemplo donde vamos aplicar los pilares de la POO\r\n\r\n---\r\n\r\n<br>\r\n\r\n- Hagamos un ejemplo como si estuviéramos creando un escuela online en este caso sera como un pequeño Platzi\r\n\r\n  <br>\r\n\r\n<Code language=\"javascript\">\r\n\r\nclass Student {\r\n// definimos nustrastras variables en el contructor\r\nconstructor({\r\nname,\r\nemail,\r\nusername,\r\ntwitter = undefined,\r\ninstagram = undefined,\r\nfacebook = undefined,\r\napprovedCourses = [],\r\nlearningPaths = [],\r\n}) {\r\nthis.name = name;\r\nthis.email = email;\r\nthis.username = username;\r\nthis.socialMedia = {\r\ntwitter,\r\ninstagram,\r\nfacebook,\r\n};\r\nthis.approvedCourses = approvedCourses;\r\nthis.learningPaths = learningPaths;\r\n}\r\n}\r\n\r\n// creamos instacia de la clase Student\r\nconst henner = new Student({\r\nname: \"Hennerdev\",\r\nusername: \"Hennerdev\",\r\nemail: \"Hennerdev@Hennerdev.com\",\r\ntwitter: \"Hennerdev\",\r\nlearningPaths: [\r\n{\r\nname: \"Desarrollo web\",\r\ncourses: [\"Curso basico javaScript, Curso de CSS\"],\r\n},\r\n{\r\nname: \"Desarrollo vps\",\r\ncourses: [\"Curso de Unity\"],\r\n},\r\n],\r\n});\r\nconsole.log(henner);\r\n\r\n</Code>\r\n<br>\r\n<br>\r\n\r\n#### Aplicando la abstracción\r\n\r\n<br>\r\n\r\n- abstraemos learningPath para no tener que crear las escuelas a cada rato\r\n\r\n<br>\r\n\r\n<Code language=\"javascript\">\r\n\r\nclass LearningPath {\r\nconstructor({ name, courses = [] }) {\r\nthis.name = name;\r\nthis.courses = courses;\r\n}\r\n}\r\n\r\n// creamos escuelaweb\r\nconst escuelaWeb = new LearningPath({\r\nname: \"Escuela de Desarrollo Web\",\r\ncourses: [cursoProgBasica, cursoDefinitivoHTML, cursoPracticoHTML],\r\n});\r\n\r\nconst escuelaVgs = new LearningPath({\r\nname: \"Escuela de Vidweojuegos\",\r\ncourses: [cursoProgBasica, \"Curso de Unity\", \"Curso de Unreal\"],\r\n});\r\n\r\n// ahora abstraemos Course para no tener que crear los mismo cursos en cada escuela\r\nclass Course {\r\nconstructor({ name, classes = [] }) {\r\nthis.name = name;\r\nthis.classes = classes;\r\n}\r\n}\r\n\r\nconst cursoProgBasica = new Course({\r\nname: \"Curso Gratis de Programación Básica\",\r\n});\r\nconst cursoDefinitivoHTML = new Course({\r\nname: \"Curso Definitivo de HTML y CSS\",\r\n});\r\nconst cursoPracticoHTML = new Course({\r\nname: \"Curso Practico de HTML y CSS\",\r\n});\r\n\r\n</Code>\r\n\r\n<br>\r\n\r\n#### Aplicando la encapsulamiento\r\n\r\n<br>\r\n\r\n##### ¿Que son los getter y setter?\r\n\r\n<br>\r\n\r\nUna función que obtiene un valor de una propiedad se llama getter y una que establece el valor de una propiedad se llama setter.\r\n<br>\r\nEn ES2020 se introdujo la sintaxis campos privados en las clases. Se hace uso de un numeral como prefijo del nombre de la variable.\r\n<br>\r\n\r\n_¿Cúal sería la ventaja de usar esto?_\r\n<br>\r\nQue no existe la posibilidad de que alguien modifique la variable privada desde la instancia a menos de que use el setter que le dimos\r\n\r\n<br>\r\n<br>\r\n<Code language=\"javascript\">\r\n\r\nclass Course {\r\n#name;\r\n\r\nconstructor({\r\nname,\r\nclasses = []\r\n}) {\r\nthis.#name = name;\r\nthis.classes = classes;\r\n}\r\n\r\nget name() {\r\nreturn this.#name;\r\n}\r\n\r\nset name(nuevoNombrecito) {\r\nif (nuevoNombrecito === 'Curso Malito de Programación Básica') {\r\nconsole.error('Web... no');\r\n} else {\r\nthis.#name = nuevoNombrecito;\r\n}\r\n}\r\n}\r\n</Code>\r\n\r\n<br>\r\n\r\n### Aplicando herencia\r\n\r\n<br>\r\n\r\nRecordemos que las herencia nos permite crear clases madres que nos van servir como mode para crear clases hijas,que compartirán sus métodos y atributos.\r\n<br>\r\nEn este ejemplo crearemos una clase student que va ha servir como clase hija para los tipo de estudiantes que hay en Platzi.\r\n\r\n<br>\r\n\r\nPara aplicar herencia usamos la palabra reservada _extends_ para aplicar herencia\r\n\r\n<Code language=\"javascript\">\r\n\r\nclass Course {\r\nconstructor({\r\nname,\r\nclasses = [],\r\nisFree = false,\r\nlang = \"spanish\",\r\n}) {\r\nthis.\\_name = name;\r\nthis.classes = classes;\r\nthis.isFree = isFree;\r\nthis.lang = lang;\r\n}\r\n\r\nget name() {\r\nreturn this.\\_name;\r\n}\r\n\r\nset name(nuevoNombrecito) {\r\nif (nuevoNombrecito === \"Curso Malito de Programación Básica\") {\r\nconsole.error(\"Web... no\");\r\n} else {\r\nthis.\\_name = nuevoNombrecito;\r\n}\r\n}\r\n}\r\n\r\nconst cursoProgBasica = new Course({\r\nname: \"Curso Gratis de Programación Básica\",\r\nisFree: true,\r\n});\r\nconst cursoDefinitivoHTML = new Course({\r\nname: \"Curso Definitivo de HTML y CSS\",\r\n});\r\nconst cursoPracticoHTML = new Course({\r\nname: \"Curso Practico de HTML y CSS\",\r\nlang: \"english\",\r\n});\r\n\r\nclass LearningPath {\r\nconstructor({\r\nname,\r\ncourses = [],\r\n}) {\r\nthis.name = name;\r\nthis.courses = courses;\r\n}\r\n}\r\n\r\nconst escuelaWeb = new LearningPath({\r\nname: \"Escuela de Desarrollo Web\",\r\ncourses: [\r\ncursoProgBasica,\r\ncursoDefinitivoHTML,\r\ncursoPracticoHTML,\r\n],\r\n});\r\n\r\nconst escuelaData = new LearningPath({\r\nname: \"Escuela de Data Science\",\r\ncourses: [\r\ncursoProgBasica,\r\n\"Curso DataBusiness\",\r\n\"Curso Dataviz\",\r\n],\r\n});\r\n\r\nconst escuelaVgs = new LearningPath({\r\nname: \"Escuela de Vidweojuegos\",\r\ncourses: [\r\ncursoProgBasica,\r\n\"Curso de Unity\",\r\n\"Curso de Unreal\",\r\n],\r\n})\r\n\r\nclass Student {\r\nconstructor({\r\nname,\r\nemail,\r\nusername,\r\ntwitter = undefined,\r\ninstagram = undefined,\r\nfacebook = undefined,\r\napprovedCourses = [],\r\nlearningPaths = [],\r\n}) {\r\nthis.name = name;\r\nthis.email = email;\r\nthis.username = username;\r\nthis.socialMedia = {\r\ntwitter,\r\ninstagram,\r\nfacebook,\r\n};\r\nthis.approvedCourses = approvedCourses;\r\nthis.learningPaths = learningPaths;\r\n}\r\n}\r\n\r\nclass FreeStudent extends Student {\r\nconstructor(props) {\r\nsuper(props);\r\n}\r\n\r\napproveCourse(newCourse) {\r\nif (newCourse.isFree) {\r\nthis.approvedCourses.push(newCourse);\r\n} else {\r\nconsole.warn(\"Lo sentimos, \" + this.name + \", solo puedes tomar cursos abiertos\");\r\n}\r\n}\r\n}\r\n\r\nclass BasicStudent extends Student {\r\nconstructor(props) {\r\nsuper(props);\r\n}\r\n\r\napproveCourse(newCourse) {\r\nif (newCourse.lang !== \"english\") {\r\nthis.approvedCourses.push(newCourse);\r\n} else {\r\nconsole.warn(\"Lo sentimos, \" + this.name + \", no puedes tomar cursos en inglés\");\r\n}\r\n}\r\n}\r\n\r\nclass ExpertStudent extends Student {\r\nconstructor(props) {\r\nsuper(props);\r\n}\r\n\r\napproveCourse(newCourse) {\r\nthis.approvedCourses.push(newCourse);\r\n}\r\n}\r\n\r\nconst juan = new FreeStudent({\r\nname: \"JuanDC\",\r\nusername: \"juandc\",\r\nemail: \"juanito@juanito.com\",\r\ntwitter: \"fjuandc\",\r\nlearningPaths: [\r\nescuelaWeb,\r\nescuelaVgs,\r\n],\r\n});\r\n\r\nconst miguelito = new BasicStudent({\r\nname: \"Miguelito\",\r\nusername: \"migelitofeliz\",\r\nemail: \"miguelito@juanito.com\",\r\ninstagram: \"migelito_feliz\",\r\nlearningPaths: [\r\nescuelaWeb,\r\nescuelaData,\r\n],\r\n});\r\n</Code>\r\n\r\n<br>\r\n\r\n### Aplicando poliforfismo\r\n\r\n<br>\r\n\r\n- En este ejemplo crearemos un metodo publicar comentario que se comportara demanera diferente dependiendo que tipo de estudiante va ha publicar dicho comentario\r\n\r\n<br>\r\n<Code language=\"javascript\">\r\n\r\nclass Comment {\r\nconstructor({ content, studentName, studentRole = \"estudiante\" }) {\r\nthis.content = content;\r\nthis.studentName = studentName;\r\nthis.studentRole = studentRole;\r\nthis.likes = 0;\r\n}\r\n\r\npublicar() {\r\nconsole.log(this.studentName + \" (\" + this.studentRole + \")\");\r\nconsole.log(this.likes + \" likes\");\r\nconsole.log(this.content);\r\n}\r\n}\r\nclass Course {\r\nconstructor({ name, classes = [], isFree = false, lang = \"spanish\" }) {\r\nthis.\\_name = name;\r\nthis.classes = classes;\r\nthis.isFree = isFree;\r\nthis.lang = lang;\r\n}\r\n\r\nget name() {\r\nreturn this.\\_name;\r\n}\r\n\r\nset name(nuevoNombrecito) {\r\nif (nuevoNombrecito === \"Curso Malito de Programación Básica\") {\r\nconsole.error(\"Web... no\");\r\n} else {\r\nthis.\\_name = nuevoNombrecito;\r\n}\r\n}\r\n}\r\n\r\nconst cursoProgBasica = new Course({\r\nname: \"Curso Gratis de Programación Básica\",\r\nisFree: true,\r\n});\r\nconst cursoDefinitivoHTML = new Course({\r\nname: \"Curso Definitivo de HTML y CSS\",\r\n});\r\nconst cursoPracticoHTML = new Course({\r\nname: \"Curso Practico de HTML y CSS\",\r\nlang: \"english\",\r\n});\r\n\r\nclass LearningPath {\r\nconstructor({ name, courses = [] }) {\r\nthis.name = name;\r\nthis.courses = courses;\r\n}\r\n}\r\n\r\nconst escuelaWeb = new LearningPath({\r\nname: \"Escuela de Desarrollo Web\",\r\ncourses: [cursoProgBasica, cursoDefinitivoHTML, cursoPracticoHTML],\r\n});\r\n\r\nconst escuelaData = new LearningPath({\r\nname: \"Escuela de Data Science\",\r\ncourses: [cursoProgBasica, \"Curso DataBusiness\", \"Curso Dataviz\"],\r\n});\r\n\r\nconst escuelaVgs = new LearningPath({\r\nname: \"Escuela de Vidweojuegos\",\r\ncourses: [cursoProgBasica, \"Curso de Unity\", \"Curso de Unreal\"],\r\n});\r\n\r\nclass Student {\r\nconstructor({\r\nname,\r\nemail,\r\nusername,\r\ntwitter = undefined,\r\ninstagram = undefined,\r\nfacebook = undefined,\r\napprovedCourses = [],\r\nlearningPaths = [],\r\n}) {\r\nthis.name = name;\r\nthis.email = email;\r\nthis.username = username;\r\nthis.socialMedia = {\r\ntwitter,\r\ninstagram,\r\nfacebook,\r\n};\r\nthis.approvedCourses = approvedCourses;\r\nthis.learningPaths = learningPaths;\r\n}\r\n\r\npublicarComentario(commentContent) {\r\nconst comment = new Comment({\r\ncontent: commentContent,\r\nstudentName: this.name,\r\n});\r\ncomment.publicar();\r\n}\r\n}\r\n\r\nclass FreeStudent extends Student {\r\nconstructor(props) {\r\nsuper(props);\r\n}\r\n\r\napproveCourse(newCourse) {\r\nif (newCourse.isFree) {\r\nthis.approvedCourses.push(newCourse);\r\n} else {\r\nconsole.warn(\r\n\"Lo sentimos, \" + this.name + \", solo puedes tomar cursos abiertos\"\r\n);\r\n}\r\n}\r\n}\r\n\r\nclass BasicStudent extends Student {\r\nconstructor(props) {\r\nsuper(props);\r\n}\r\n\r\napproveCourse(newCourse) {\r\nif (newCourse.lang !== \"english\") {\r\nthis.approvedCourses.push(newCourse);\r\n} else {\r\nconsole.warn(\r\n\"Lo sentimos, \" + this.name + \", no puedes tomar cursos en inglés\"\r\n);\r\n}\r\n}\r\n}\r\n\r\nclass ExpertStudent extends Student {\r\nconstructor(props) {\r\nsuper(props);\r\n}\r\n\r\napproveCourse(newCourse) {\r\nthis.approvedCourses.push(newCourse);\r\n}\r\n}\r\n\r\nclass TeacherStudent extends Student {\r\nconstructor(props) {\r\nsuper(props);\r\n}\r\n\r\napproveCourse(newCourse) {\r\nthis.approvedCourses.push(newCourse);\r\n}\r\n\r\npublicarComentario(commentContent) {\r\nconst comment = new Comment({\r\ncontent: commentContent,\r\nstudentName: this.name,\r\nstudentRole: \"profesor\",\r\n});\r\ncomment.publicar();\r\n}\r\n}\r\n\r\nconst juan = new FreeStudent({\r\nname: \"JuanDC\",\r\nusername: \"juandc\",\r\nemail: \"juanito@juanito.com\",\r\ntwitter: \"fjuandc\",\r\nlearningPaths: [escuelaWeb, escuelaVgs],\r\n});\r\n\r\nconst miguelito = new BasicStudent({\r\nname: \"Miguelito\",\r\nusername: \"migelitofeliz\",\r\nemail: \"miguelito@juanito.com\",\r\ninstagram: \"migelito_feliz\",\r\nlearningPaths: [escuelaWeb, escuelaData],\r\n});\r\n\r\nconst freddy = new TeacherStudent({\r\nname: \"Freddy Vega\",\r\nusername: \"freddier\",\r\nemail: \"f@gep.com\",\r\ninstagram: \"freddiervega\",\r\n});\r\n\r\n</Code>\r\n"},{"id":1,"title":"Aprende como consumir una API!\r","category":"Desarrollo frontend\r","date":"Agosto 11, 2022\r","content":"\r\n## Consumo API REST con javaScript\r\n\r\n<br>\r\n\r\nEn la actualidad el desarrollo basado en servicios como API REST se han convertido prácticamente en estándar necesario para dar un paso más en la integración de sistemas y con este, en el desarrollo de la humanidad.\r\n\r\n<br>\r\n\r\n### ¿Que es una API ?\r\n\r\n <br>\r\nAPI:Application Program Interface -> Interfaz <br>\r\nuna interfaz es el medio por el cual la computadora se conecta con los humanos. Es lo visible para el usuario que interactúe con una app\r\n<br>\r\n<br>\r\n\r\n### API REST\r\n\r\n<br>\r\nREST: Representational State Transfer <br>\r\nEs el medio por el cual se comunican computadoras con otras computadoras. O también podemos pensarlo como robots con robots 🤖. Puede ser backend con frontend, backend con backend, etc.\r\n<br>\r\n_Nota_ A diferencia de una página web, que se muestra con imágenes, textos formateados, etc.; la llamada de una API REST se devuelve en un archivo JSON.\r\n<br>\r\n\r\n![Comunicación frontend y backend](https://i.ibb.co/ncYZTyj/qvaysugwhd9mge3pxr7j.webp)\r\n\r\n#### Ejemplo de consumo de API con fetct, async y await\r\n\r\n<Code language=\"javascript\">\r\n// api de thecatapi\r\nconst URL = \"https:/\\/api.thecatapi.com/v1/images/search\";\r\nconst IMG = document.querySelector(\"img\");\r\nasync function getAnimal() {\r\nconst response = await fetch(URL);\r\nconst data = await response.json();\r\nIMG.src = data[0].url;\r\n}\r\ngetAnimal()\r\n\r\n</Code>\r\n\r\n<br>\r\n\r\n#### Endpoints y query parameters\r\n\r\n<br>\r\n\r\nUn _endpoint_ es una ubicación digital por la cual una API recibe peticiones para acceder a un recurso en servidor.Típicamente es una URL que provee la ubicación de un recurso especifica.\r\n<br>\r\n<br>\r\n\r\n-- hennerdev.com/api/courses<br>\r\n-- hennerdev.com/api/avatares<br>\r\n-- hennerdev.com/api/students\r\n<br><br>\r\nLos **query parameters** son una extensión de las URLs que se utilizan en las peticiones a una API. son pares _key-value_ que contienen información útil para poder especificar el contenido al que queremos acceder o las acciones que queremos realizar nos sirven básicamente para hacer filtros.\r\n<br>\r\n-- hennerdev.com/api/students/category?search=best\r\n-- hennerdev.com/api/students/limit=2&offset=0\r\n<br>\r\n\r\n### Que son los status code\r\n\r\n<br>\r\nEl status code (código de estado) o códigos de error, como su propio nombre describe son una serie de códigos de tres cifras estandarizados y que están relacionados con una serie de determinados errores que pueden suceder al introducir en nuestro navegador una dirección web\r\n<br>\r\nLos códigos de estado HTTP se dividen en 5 «tipos». Se trata de agrupaciones de respuestas que tienen significados similares o relacionados. Saber qué son puede ayudarte a determinar rápidamente la sustancia general de un código de estado antes de que vayas a buscar su significado específico.\r\n<br>\r\n1XX Respuestas Afirmativas\r\n\r\n2XX Respuestas satisfactorias\r\n\r\n3XX Re-direcciones\r\n\r\n4XX Error del cliente\r\n\r\n5XX Error de servidor\r\n\r\n<br>\r\n \r\n [Api puedes aprender los _status code_ de forma divertida](https://httpstatusdogs.com/)\r\n\r\n<br>\r\n<br>\r\n\r\n#### ¿Que son las API keys?\r\n\r\n<br>\r\n\r\nLas **API keys** son un método de autentificación util para identificar quien esta haciendo la solicitud a los endpoints de una API.\r\n\r\nEs importante hacer la distinción entre autenticación y autorización\r\n\r\n<br>\r\n\r\n#### Autentificación vs Autorización\r\n\r\n<br>\r\n\r\n_*Autentificación*_ quién sos <br>\r\n_*autorización*_ qué puedes hacer\r\n\r\n<br>\r\n\r\nExisten muchas maneras autentificación una muy usada y preferida por su simplicidad son las _API keys_,sobre todo en las APIs de solo lectura.\r\n\r\n<br>\r\n\r\n#### ¿Como se crean estas llaves?\r\n\r\n<br>\r\n<br>\r\n\r\nNo existe ningún restricción para implementar esto. Cada sistema genera sus llaves a su manera, la mas utilizada es un hash i número al azar.\r\n\r\n<br>\r\n<br>\r\n\r\n#### Otras formas de autorización\r\n\r\n<br><br>\r\n\r\n- Authorization: Basic\r\n- Authorization: Bearer Token\r\n- OAuth 2.0 (La mas complicada)\r\n- Access key + Secret key\r\n\r\n  <br>\r\n\r\n#### ¿Qué es HTTP?\r\n\r\n<br>\r\n<br>\r\n\r\n**HTTP(Hypertext Transfer Protocol)** es una protocolo o un conjunto de reglas definido para acceder a un recurso en la web.La manera en que las partes de una arquitectura cliente-servidor se comunican por medio de este protocolo.\r\n<br>\r\n\r\nUno de los elementos de las peticiones es el método HTTP\r\n<br>\r\n\r\n_POST_ -> Create\r\n_GET_ -> Read\r\n_PUT/PATCH_ -> Update\r\n_DELETE_ -> Delete\r\n<br>\r\n\r\n <br>\r\n Estos verbos indican al servidor que acción buscamos hacer el endpoint al que estamos haciendo una solicitud\r\n\r\n <br>\r\n \r\n#### ¿Qué son los Headers HTTP?\r\n<br>\r\n\r\n <br>\r\nLos headers HTTP son parámetros que se envían en una transacción HTTP, que contienen información del estado de la transacción en curso.\r\n\r\n <br>\r\nCuando un cliente solicita información a un servidor, este puede pasarle información adicional en el header de la solicitud. información del tipo de datos que se esperan recibir, del tipo de datos que envían, información de autenticación etc.\r\n\r\n <br>\r\n <br>\r\n\r\n#### Ejemplos de Headers\r\n\r\n <br>\r\n**Request Headers**\r\n\r\n <br>\r\nPasan información de la solicitud. Contienen información sobre el recurso solicitado e información del cliente que la solicita.\r\n\r\nEstos pueden ser:\r\n<br>\r\n\r\n**Accept**: Informan al servidor el tipo de datos que el cliente puede entender\r\n\r\n<Code language=\"javascript\">\r\n\r\nAccept: text/html\r\nAccept: application/xhtml+xml\r\nAccept: image/png\r\n\r\n</Code>\r\n<br>\r\n\r\n**Authorization**: sirve para pasar credenciales que le servirán al servidor determinar si el cliente tiene acceso a ciertos recursos\r\n\r\n<Code language=\"javascript\">\r\n\r\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\r\nAuthorization: Bearer eyYWxhZGRpbjpvcGVuc2VzYW1l\r\n\r\n</Code>\r\n\r\n<br>\r\n\r\n**Cache-Control**: contiene información sobre el control de la cache por parte del cliente y del servidor.\r\n\r\n<Code language=\"javascript\">\r\n\r\nCache-Control: stale-while-revalidate=60\r\nCache-Control: no-cache\r\n</Code>\r\n\r\n<br>\r\n<br>\r\n\r\n#### Response Headers\r\n\r\n<br>\r\nAsí como los request headers contienen información del cliente, los response headers contienen información del servidor al que se le hace la petición.\r\n\r\n<br>\r\n<br>\r\n\r\n**Age**: Contienen información del tiempo que un objeto estuvo en caché. Se representa en segundos. Si es 0(cero) significa que la solicitud se obtuvo del servidor de origen. (Age: 24)\r\n<br>\r\n\r\n**Server**: Describen el software usado por el servidor que manejó la solicitud. Es decir el que generó la respuesta.(Server: Apache/2.4.1 (Unix)\r\n)\r\n<br>\r\n<br>\r\n\r\n#### Representation Headers\r\n\r\n<br>\r\n\r\nContienen información acerca del body de la solicitud, enviado en una respuesta o (en un POST)\r\n\r\n<br>\r\n\r\n**Content-type** Indica el tipo de contenido (formato de archivo) es enviado en una solicitud. ejemplo (Content-Type: text/html; charset=UTF-8)\r\n\r\n**Content-Enconding** Contienen la información necesaria para decodificar un archivo a su formato original.\r\n\r\nContent-Encoding: compress\r\nContent-Encoding: gzip\r\n<br><br><br>\r\n"}]